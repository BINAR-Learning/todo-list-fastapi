name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  security:
    runs-on: ubuntu-latest
    name: Security Scan
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run Bandit security scan
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
        bandit -r app/ || true

    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json || true
        safety check || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  quality:
    runs-on: ubuntu-latest
    name: Code Quality
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort mypy pylint

    - name: Check code formatting with Black
      run: |
        black --check --diff app/

    - name: Check import sorting with isort
      run: |
        isort --profile black --check-only --diff app/

    - name: Type checking with MyPy
      run: |
        mypy app/ --ignore-missing-imports || true

    - name: Lint with PyLint
      run: |
        pylint app/ --output-format=json > pylint-report.json || true
        pylint app/ || true

    - name: Upload quality reports
      uses: actions/upload-artifact@v4
      with:
        name: quality-reports
        path: pylint-report.json

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run unit tests with coverage
      run: |
        pytest --cov=app --cov-report=xml --cov-report=html --cov-report=term-missing --cov-fail-under=90 -v --junitxml=test-results.xml

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: test-results.xml

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-${{ matrix.python-version }}
        path: |
          coverage.xml
          htmlcov/

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.12'
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: integration
        name: codecov-ci-cd
        fail_ci_if_error: false
        verbose: true

    # Coverage comment on PR disabled temporarily
    # - name: Comment coverage on PR
    #   if: github.event_name == 'pull_request' && matrix.python-version == '3.12'
    #   uses: orgoro/coverage@v3.2
    #   with:
    #       coverageFile: coverage.xml
    #       token: ${{ secrets.GITHUB_TOKEN }}

  integration:
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run integration tests
      run: |
        pytest tests/test_integration.py -v

    - name: Test API endpoints
      run: |
        # Start the API in background
        python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        API_PID=$!
        
        # Wait for API to start
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:8000/health || exit 1
        
        # Test root endpoint
        curl -f http://localhost:8000/ || exit 1
        
        # Test docs endpoint
        curl -f http://localhost:8000/docs || exit 1
        
        # Kill the API process
        kill $API_PID
